/*Flex has conatiner and children.

By default flex is done to main axis(horizontal).If we want to flex in cross axis then we need to change
flex direction:column. By default flex direction is row*/

/*Flex Container properties- 1)flex direction  2)flex-wrap  3)flex-flow  4)justify-content  5)align-items  6)align-content*/

/*Flex Child properties- 1)order  2)flex-grow  3)flex-shrink  4)flex-basis  5)flex  6)align-self*/

* {
  box-sizing: border-box;
}

.container {
  height: 400px;
  border: 2px solid red;
  display: flex;
  /* flex-direction: row-reverse; boxes filled from right to left */

  /* flex-direction: column-reverse; boxes filled from bottom to top */

  /* flex-direction: column;  Flex in cross-axis*/

  /* flex-wrap: wrap; Whenever page shrinked,boxes wrap(i.e align themselves by moving to next line)*/

  /* flex-wrap: wrap-reverse; boxes wrap in reverse order. */

  /* gap: 10px; Gap between boxes only.If margin then gap also between border and first box
    row and column gap both 10px.gap is shorthand for row and col gap*/

  /* row-gap: 10px;

    column-gap: 20px; */

  flex-flow: wrap row; /*shorthand for wrap and direction. flex wrap:wrap and flex direction:row*/

  /*justify content is used for centering about main axis*/

  justify-content: space-around; /*equal space on left and right of each box.
    When shrinked first space shrinks,then boxes.No blank spaces left.*/

  /*justify-content: space-between; equal space between boxes but no space on left and right of border*/

  /* justify-content: flex-end; All boxes aligned to right*/

  /* justify-content: flex-start; All boxes aligned to left */

  /* justify-content: center; Boxes in centre.Space around and centre cant go together.
    If you want equal spaces and centre alignment then use gap and not space around*/

  /* align-items: used for centering along cross axis*/
  align-items: center;

  /*To centre a div within a div we make parent conatiner display:flex and define justify-content:centre 
    and align-items:centre*/
  align-content: space-evenly; /*equal spacing between rows when shrinked*/

  /*Most important are display:flex and all values of justify-content and align-items*/
}

.box {
  border: 2px solid green;
  width: 80px;
  /*flex-basis: 25%.This ensures that all the 8 boxes are divided into 2 lines(4 each) instead of 1 line.[25%*4=100& for each line];
  To make boxes appear in 2 lines we use flex-basis,inlcude wrap,inlcude box sizing:border box and remove gap*/
}

#box-1 {
  /* order: 1. by default all boxes have order 0.Order 1 means box-1 will go to end.Box having highest order will be seen at end*/
  flex-grow: 1; /*box 1 will grow.It will be bigger than all the boxes except box-3.The moment it goes below 80px, it starts to wrap.
    By default flex-grow has value 0.*/

  /*flex-grow makes space around property useless as it increase size of boxes.
    If we ant to use flex-grow with that we have to use gap*/
}

#box-3 {
  flex-grow: 2; /*Box-3 grows double compared to box-1*/
}

#box-4 {
  flex-shrink: 3; /*By default flex-shrink has value 1(unlike 0 incase of flex-grow).
    box 4 will shrink first but only if not wrapped.Here it is wrapped so no change.Then box 5 will shrink*/
}

#box-5 {
  flex-shrink:2;
  /* flex-basis: 200px; It is used to determine initial width about main axis.It is different from flex-grow as it makes the box
  bigger initially and on expanding the box with flex-basis does not grow first but the box with flex-grow does.*/
}

#box-7{
    /*flex:0 0 200px. flex is shorthand for flex-grow,flex-shrink and flex-basis. flex:0 0 200px means no shrink,growth but initial
    width will be 200px about main axis*/
}

#box-8{
    /*align-self: stretch; Only box 8 will stretch along the cross(vertical axis)Here there will be no change as we have defined
    wrap which will make align-self useless*/
}